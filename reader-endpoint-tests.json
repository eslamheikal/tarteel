{
  "description": "Test cases for Reader Endpoint API",
  "baseUrl": "http://localhost:5000/api/readers",
  "headers": {
    "Content-Type": "application/json",
    "Authorization": "Bearer YOUR_TOKEN_HERE"
  },
  "testCases": {
    "getAllReaders": {
      "method": "GET",
      "url": "{{baseUrl}}?action=all",
      "description": "Get all readers",
      "body": null,
      "expectedResponse": {
        "success": true,
        "data": "Array of all readers"
      }
    },
    "getReadersPaged": {
      "method": "GET",
      "url": "{{baseUrl}}?action=paged&page=1&pageSize=10&sortBy=id&sortOrder=asc&search=",
      "description": "Get readers with pagination",
      "body": null,
      "expectedResponse": {
        "success": true,
        "data": "Paged list of readers"
      }
    },
    "getReadersPagedWithSearch": {
      "method": "GET",
      "url": "{{baseUrl}}?action=paged&page=1&pageSize=5&sortBy=uniqueUrl&sortOrder=desc&search=mohamed",
      "description": "Get readers with search and custom pagination",
      "body": null,
      "expectedResponse": {
        "success": true,
        "data": "Filtered and paged readers"
      }
    },
    "getReaderById": {
      "method": "GET",
      "url": "{{baseUrl}}?action=get&id=1",
      "description": "Get a specific reader by ID",
      "body": null,
      "expectedResponse": {
        "success": true,
        "data": "Reader object"
      }
    },
    "getReaderByUserId": {
      "method": "GET",
      "url": "{{baseUrl}}?action=by-user&userId=1",
      "description": "Get reader by user ID",
      "body": null,
      "expectedResponse": {
        "success": true,
        "data": "Reader object"
      }
    },
    "getReaderByUrl": {
      "method": "GET",
      "url": "{{baseUrl}}?action=by-url&uniqueUrl=mohamed-mabrouk",
      "description": "Get reader by unique URL",
      "body": null,
      "expectedResponse": {
        "success": true,
        "data": "Reader object"
      }
    },
    "createReader": {
      "method": "POST",
      "url": "{{baseUrl}}?action=create",
      "description": "Create a new reader",
      "body": {
        "userId": 1,
        "uniqueUrl": "ahmed-mohamed",
        "imageUrl": "https://example.com/images/ahmed-mohamed.jpg",
        "bio": "Experienced Quran reciter with beautiful voice",
        "facebook": "https://facebook.com/ahmed.mohamed",
        "youtube": "https://youtube.com/@ahmedmohamed"
      },
      "expectedResponse": {
        "success": true,
        "data": "Reader created successfully"
      }
    },
    "createReaderMinimal": {
      "method": "POST",
      "url": "{{baseUrl}}?action=create",
      "description": "Create a reader with minimal required fields",
      "body": {
        "userId": 2,
        "uniqueUrl": "sara-ahmed",
        "imageUrl": "https://example.com/images/sara-ahmed.jpg"
      },
      "expectedResponse": {
        "success": true,
        "data": "Reader created successfully"
      }
    },
    "createReaderWithUser": {
      "method": "POST",
      "url": "{{baseUrl}}?action=create-with-user",
      "description": "Create a reader with user data in one request",
      "body": {
        "name": "Ahmed Hassan",
        "email": "ahmed.hassan@example.com",
        "phone": "+201234567890",
        "password": "securePassword123",
        "uniqueUrl": "ahmed-hassan",
        "imageUrl": "https://example.com/images/ahmed-hassan.jpg",
        "bio": "Professional Quran reciter with 10+ years experience",
        "facebook": "https://facebook.com/ahmed.hassan",
        "youtube": "https://youtube.com/@ahmedhassan"
      },
      "expectedResponse": {
        "success": true,
        "data": "Reader and user created successfully"
      }
    },
    "createReaderWithUserMinimal": {
      "method": "POST",
      "url": "{{baseUrl}}?action=create-with-user",
      "description": "Create a reader with user data using minimal required fields",
      "body": {
        "name": "Fatima Ali",
        "email": "fatima.ali@example.com",
        "password": "securePassword456",
        "uniqueUrl": "fatima-ali",
        "imageUrl": "https://example.com/images/fatima-ali.jpg"
      },
      "expectedResponse": {
        "success": true,
        "data": "Reader and user created successfully"
      }
    },
    "updateReader": {
      "method": "PUT",
      "url": "{{baseUrl}}?action=update",
      "description": "Update an existing reader",
      "body": {
        "id": 1,
        "userId": 1,
        "uniqueUrl": "ahmed-mohamed-updated",
        "imageUrl": "https://example.com/images/ahmed-mohamed-new.jpg",
        "bio": "Updated bio - Professional Quran reciter with 10+ years experience",
        "facebook": "https://facebook.com/ahmed.mohamed.new",
        "youtube": "https://youtube.com/@ahmedmohamedofficial"
      },
      "expectedResponse": {
        "success": true,
        "data": "Reader updated successfully"
      }
    },
    "deleteReader": {
      "method": "DELETE",
      "url": "{{baseUrl}}?action=delete&id=1",
      "description": "Delete a reader by ID",
      "body": null,
      "expectedResponse": {
        "success": true,
        "data": "Reader deleted successfully"
      }
    },
    "checkUrlAvailability": {
      "method": "GET",
      "url": "{{baseUrl}}?action=check-url&uniqueUrl=mohamed-mabrouk",
      "description": "Check if a unique URL is available",
      "body": null,
      "expectedResponse": {
        "success": true,
        "data": "URL availability status"
      }
    },
    "checkUrlAvailabilityExcludeId": {
      "method": "GET",
      "url": "{{baseUrl}}?action=check-url&uniqueUrl=mohamed-mabrouk&excludeId=1",
      "description": "Check URL availability excluding a specific reader ID",
      "body": null,
      "expectedResponse": {
        "success": true,
        "data": "URL availability status"
      }
    }
  },
  "sampleReaders": {
    "famousReader1": {
      "userId": 1,
      "uniqueUrl": "mohamed-mabrouk",
      "imageUrl": "https://example.com/images/mohamed-mabrouk.jpg",
      "bio": "Famous Egyptian Quran reciter known for his beautiful recitation style",
      "facebook": "https://facebook.com/mohamed.mabrouk.official",
      "youtube": "https://youtube.com/@mohamedmabrouk"
    },
    "famousReader2": {
      "userId": 2,
      "uniqueUrl": "abdallah-medhat",
      "imageUrl": "https://example.com/images/abdallah-medhat.jpg",
      "bio": "Renowned reciter with melodious voice and deep understanding of Tajweed",
      "facebook": "https://facebook.com/abdallah.medhat",
      "youtube": "https://youtube.com/@abdallahmedhat"
    },
    "famousReader3": {
      "userId": 3,
      "uniqueUrl": "anas-sho3rofi",
      "imageUrl": "https://example.com/images/anas-sho3rofi.jpg",
      "bio": "Young talented reciter with modern approach to Quran recitation",
      "facebook": "https://facebook.com/anas.sho3rofi",
      "youtube": "https://youtube.com/@anassho3rofi"
    },
    "minimalReader": {
      "userId": 4,
      "uniqueUrl": "test-reader",
      "imageUrl": "https://example.com/images/default-reader.jpg"
    }
  },
  "invalidTestCases": {
    "createReaderWithoutUserId": {
      "method": "POST",
      "url": "{{baseUrl}}?action=create",
      "description": "Try to create reader without userId (should fail)",
      "body": {
        "uniqueUrl": "test-reader",
        "imageUrl": "https://example.com/images/test.jpg"
      },
      "expectedResponse": {
        "error": "userId is required"
      }
    },
    "createReaderWithoutUniqueUrl": {
      "method": "POST",
      "url": "{{baseUrl}}?action=create",
      "description": "Try to create reader without uniqueUrl (should fail)",
      "body": {
        "userId": 1,
        "imageUrl": "https://example.com/images/test.jpg"
      },
      "expectedResponse": {
        "error": "uniqueUrl is required"
      }
    },
    "createReaderWithoutImageUrl": {
      "method": "POST",
      "url": "{{baseUrl}}?action=create",
      "description": "Try to create reader without imageUrl (should fail)",
      "body": {
        "userId": 1,
        "uniqueUrl": "test-reader"
      },
      "expectedResponse": {
        "error": "imageUrl is required"
      }
    },
    "getReaderWithoutId": {
      "method": "GET",
      "url": "{{baseUrl}}?action=get",
      "description": "Try to get reader without ID (should fail)",
      "body": null,
      "expectedResponse": {
        "error": "ID is required"
      }
    },
    "invalidAction": {
      "method": "GET",
      "url": "{{baseUrl}}?action=invalid",
      "description": "Try with invalid action (should return 405)",
      "body": null,
      "expectedResponse": {
        "error": "Method not allowed or invalid action"
      }
    },
    "requestWithoutToken": {
      "method": "GET",
      "url": "{{baseUrl}}?action=all",
      "description": "Try to access without authentication token (should return 401)",
      "headers": {
        "Content-Type": "application/json"
      },
      "body": null,
      "expectedResponse": {
        "error": "Invalid token"
      }
    },
    "createReaderWithUserWithoutName": {
      "method": "POST",
      "url": "{{baseUrl}}?action=create-with-user",
      "description": "Try to create reader with user without name (should fail)",
      "body": {
        "email": "test@example.com",
        "password": "password123",
        "uniqueUrl": "test-reader",
        "imageUrl": "https://example.com/test.jpg"
      },
      "expectedResponse": {
        "error": "name is required"
      }
    },
    "createReaderWithUserWithoutEmail": {
      "method": "POST",
      "url": "{{baseUrl}}?action=create-with-user",
      "description": "Try to create reader with user without email (should fail)",
      "body": {
        "name": "Test User",
        "password": "password123",
        "uniqueUrl": "test-reader",
        "imageUrl": "https://example.com/test.jpg"
      },
      "expectedResponse": {
        "error": "email is required"
      }
    },
    "createReaderWithUserWithoutPassword": {
      "method": "POST",
      "url": "{{baseUrl}}?action=create-with-user",
      "description": "Try to create reader with user without password (should fail)",
      "body": {
        "name": "Test User",
        "email": "test@example.com",
        "uniqueUrl": "test-reader",
        "imageUrl": "https://example.com/test.jpg"
      },
      "expectedResponse": {
        "error": "password is required"
      }
    },
    "createReaderWithUserDuplicateEmail": {
      "method": "POST",
      "url": "{{baseUrl}}?action=create-with-user",
      "description": "Try to create reader with user using existing email (should fail)",
      "body": {
        "name": "Test User",
        "email": "existing@example.com",
        "password": "password123",
        "uniqueUrl": "test-reader",
        "imageUrl": "https://example.com/test.jpg"
      },
      "expectedResponse": {
        "error": "User already exists with this email"
      }
    }
  },
  "paginationExamples": {
    "page1": "{{baseUrl}}?action=paged&page=1&pageSize=10",
    "page2": "{{baseUrl}}?action=paged&page=2&pageSize=5",
    "sortByIdAsc": "{{baseUrl}}?action=paged&sortBy=id&sortOrder=asc",
    "sortByUrlDesc": "{{baseUrl}}?action=paged&sortBy=uniqueUrl&sortOrder=desc",
    "searchByName": "{{baseUrl}}?action=paged&search=mohamed",
    "searchByUrl": "{{baseUrl}}?action=paged&search=mabrouk"
  },
  "usageInstructions": {
    "1": "Replace 'YOUR_TOKEN_HERE' in headers with a valid authentication token",
    "2": "All endpoints require authentication - make sure to include valid Authorization header",
    "3": "Update the baseUrl if your server runs on a different port",
    "4": "Use the sampleReaders section for quick testing with predefined reader data",
    "5": "Test invalid cases to ensure proper error handling and validation",
    "6": "Use pagination examples for testing different sorting and filtering options",
    "7": "Check URL availability before creating readers to avoid duplicates"
  },
  "curlExamples": {
    "getAllReaders": "curl -H \"Authorization: Bearer YOUR_TOKEN\" \"http://localhost:5000/api/readers?action=all\"",
    "createReader": "curl -X POST -H \"Content-Type: application/json\" -H \"Authorization: Bearer YOUR_TOKEN\" -d '{\"userId\":1,\"uniqueUrl\":\"test-reader\",\"imageUrl\":\"https://example.com/test.jpg\"}' \"http://localhost:5000/api/readers?action=create\"",
    "createReaderWithUser": "curl -X POST -H \"Content-Type: application/json\" -H \"Authorization: Bearer YOUR_TOKEN\" -d '{\"name\":\"Ahmed Hassan\",\"email\":\"ahmed@example.com\",\"password\":\"password123\",\"uniqueUrl\":\"ahmed-hassan\",\"imageUrl\":\"https://example.com/ahmed.jpg\"}' \"http://localhost:5000/api/readers?action=create-with-user\"",
    "getReaderById": "curl -H \"Authorization: Bearer YOUR_TOKEN\" \"http://localhost:5000/api/readers?action=get&id=1\"",
    "deleteReader": "curl -X DELETE -H \"Authorization: Bearer YOUR_TOKEN\" \"http://localhost:5000/api/readers?action=delete&id=1\""
  }
}
